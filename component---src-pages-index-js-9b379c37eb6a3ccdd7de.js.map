{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.number.is-nan.js","webpack:///./src/utils/numbers.js","webpack:///./src/pages/index.js","webpack:///./node_modules/core-js/modules/es6.number.constructor.js"],"names":["$export","S","isNaN","number","fromArabic","num","toString","replace","toInt","res","parseInt","Number","initialState","year","isLeap","txtWidth","useState","state","setState","hideRef","createRef","onChange","e","newState","val","target","value","length","current","textContent","offsetWidth","useEffect","className","ref","style","width","global","has","cof","inheritIfRequired","toPrimitive","fails","gOPN","f","gOPD","dP","$trim","trim","$Number","Base","proto","prototype","BROKEN_COF","TRIM","String","toNumber","argument","it","third","radix","maxCode","first","charCodeAt","NaN","code","digits","slice","i","l","arguments","that","this","valueOf","call","key","keys","split","j","constructor"],"mappings":"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","file":"component---src-pages-index-js-9b379c37eb6a3ccdd7de.js","sourcesContent":["// 20.1.2.4 Number.isNaN(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {\n  isNaN: function isNaN(number) {\n    // eslint-disable-next-line no-self-compare\n    return number != number;\n  }\n});\n","export const toArabic = (num) => {\n    return num.toString()\n        .replace(/0/g, '٠')\n        .replace(/1/g, '١')\n        .replace(/2/g, '٢')\n        .replace(/3/g, '٣')\n        .replace(/4/g, '٤')\n        .replace(/5/g, '٥')\n        .replace(/6/g, '٦')\n        .replace(/7/g, '٧')\n        .replace(/8/g, '٨')\n        .replace(/9/g, '٩');\n\n}\n\nexport const fromArabic = (num) => {\n    return num.toString()\n        .replace(/٠/g, '0')\n        .replace(/١/g, '1')\n        .replace(/٢/g, '2')\n        .replace(/٣/g, '3')\n        .replace(/٤/g, '4')\n        .replace(/٥/g, '5')\n        .replace(/٦/g, '6')\n        .replace(/٧/g, '7')\n        .replace(/٨/g, '8')\n        .replace(/٩/g, '9');\n}\n\nexport const toInt = (num) => {\n    const res = parseInt(fromArabic(num));\n\n    if (!res || Number.isNaN(res)) {\n        return 0;\n    }\n\n    return res;\n}","import React, { useState, useEffect, createRef } from \"react\"\r\nimport { toInt, toArabic, fromArabic } from \"../utils/numbers\";\r\n\r\nconst initialState = {\r\n    year: 2020,\r\n    isLeap: true,\r\n    txtWidth: 0,\r\n};\r\n\r\nconst isLeap = (year) => {\r\n    year = toInt(year);\r\n\r\n    if (year % 4 !== 0) {\r\n        return false;\r\n    } else if (year % 100 !== 0) {\r\n        return true;\r\n    } else if (year % 400 !== 0) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport default () => {\r\n    const [state, setState] = useState(initialState);\r\n    var hideRef = createRef();\r\n\r\n    const onChange = (e) => {\r\n        const newState = { ...state };\r\n\r\n        const val = toInt(e.target.value);\r\n        if (\r\n            e.target.value.length === 0\r\n            || (\r\n                val == fromArabic(e.target.value)\r\n                && val < 1000000\r\n            )\r\n        ) {\r\n            newState.year = toArabic(e.target.value);\r\n        }\r\n\r\n        hideRef.current.textContent = newState.year;\r\n        newState.txtWidth = hideRef.current.offsetWidth + 'px';\r\n        newState.isLeap = isLeap(val);\r\n\r\n        setState(newState);\r\n    };\r\n\r\n    useEffect(() => onChange({target: {value: \"2020\"}}), []);\r\n\r\n    return (\r\n    <div className={\"container\"}>\r\n        <h1>\r\n            هي\r\n            <span className={\"hide\"} ref={hideRef}>2020</span>\r\n            <input className={\"txt\"} style={{width: state.txtWidth}} value={state.year} onChange={onChange}/>\r\n            سنة كبيسة؟\r\n        </h1>\r\n        <br />\r\n        <h2>\r\n            {state.isLeap ? 'آه' : 'لأ'}\r\n        </h2>\r\n    </div>\r\n    );\r\n};\r\n","'use strict';\nvar global = require('./_global');\nvar has = require('./_has');\nvar cof = require('./_cof');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar toPrimitive = require('./_to-primitive');\nvar fails = require('./_fails');\nvar gOPN = require('./_object-gopn').f;\nvar gOPD = require('./_object-gopd').f;\nvar dP = require('./_object-dp').f;\nvar $trim = require('./_string-trim').trim;\nvar NUMBER = 'Number';\nvar $Number = global[NUMBER];\nvar Base = $Number;\nvar proto = $Number.prototype;\n// Opera ~12 has broken Object#toString\nvar BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;\nvar TRIM = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  if (typeof it == 'string' && it.length > 2) {\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0);\n    var third, radix, maxCode;\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default: return +it;\n      }\n      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n  $Number = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n  };\n  for (var keys = require('./_descriptors') ? gOPN(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(Base, key = keys[j]) && !has($Number, key)) {\n      dP($Number, key, gOPD(Base, key));\n    }\n  }\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  require('./_redefine')(global, NUMBER, $Number);\n}\n"],"sourceRoot":""}